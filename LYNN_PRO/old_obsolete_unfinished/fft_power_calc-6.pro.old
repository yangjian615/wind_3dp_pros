;+
;*****************************************************************************************
;
;  FUNCTION :   fft_power_calc.pro
;  PURPOSE  :    Returns the FFT power spectrum from an input array of vectors.  
;                  The power spectrum can be calculated using windowing by setting
;                  the keyword READ_WIN.  The frequency bins (Hz) associated with
;                  the power spectrum are returned too, along with a Y-scale 
;                  estimate for plotting routines.
;
;  CALLED BY:   
;               NA
;
;  CALLS:
;               my_windowf.pro
;               power_of_2.pro
;
;  REQUIRES:    
;               1)  UMN Modified Wind/3DP IDL Libraries
;
;  INPUT:
;               TT        :  [N]-Element [double] array of timestamps [s] associated
;                               with vector DAT
;               DAT       :  [N]-Element [float/double] array of data
;
;  EXAMPLES:    
;               ;;  Use a 4-term Blackman-Harris Window
;               test = fft_power_calc(tt,dat,/READ_WIN,IWINDW=4)
;
;  KEYWORDS:    
;               READ_WIN  :  If set, program uses windowing for FFT calculation
;               RANGE     :  [2]-Element [long] array defining the start and end point
;                              elements to use for plotting the data
;               FORCE_N   :  Set to a scalar (best if power of 2) to force the program
;                              my_power_of_2.pro return an array with this desired
;                              number of elements [e.g.  FORCE_N = 2L^12]
;               SAMP_RA   :  Scalar [float/double] defining the sample rate of data if
;                              odd time series is sent in (make sure units are
;                              consistent with 1/TT)
;               IWINDW    :  Scalar [long] defining the type of windowing function to use
;                              [Default = 2]
;                                0  =  Rectangle [Dirichlet] Window
;                                1  =  Hamming Window
;                                2  =  Hanning Window
;                                3  =  Triangle [Fejer, Bartlet] Window
;                                4  =  Blackman-Harris Window [4-term]
;                                5  =  Kaiser-Bessel Window [alpha = 3.0]
;
;   CHANGED:  1)  Forced 1D data entry
;                                                                  [09/25/2008   v1.2.0]
;             2)  Changed logic statement
;                                                                  [09/29/2008   v1.2.1]
;             3)  Fixed prime # issue near 2^15
;                                                                  [11/04/2008   v1.2.2]
;             4)  Fixed indexing issue in 3)
;                                                                  [11/05/2008   v1.2.3]
;             5)  Changed output to return ONLY arrays that have powers of 2 for 
;                  # of elements
;                                                                  [11/20/2008   v3.0.0]
;             6)  Fixed scaling issue in 5)
;                                                                  [11/21/2008   v3.0.1]
;             7)  Fixed windowing issue in 6)
;                                                                  [11/21/2008   v3.0.2]
;             8)  Fixed scaling issue in 7)
;                                                                  [11/22/2008   v3.0.3]
;             9)  Changed output structure
;                                                                  [11/22/2008   v3.1.0]
;            10)  Added KEYWORD:   FORCE_N
;                                                                  [11/22/2008   v3.1.1]
;            11)  Changed some syntax
;                                                                  [12/03/2008   v3.1.2]
;            12)  Added KEYWORD:   SAMP_RA
;                                                                  [04/06/2009   v3.1.3]
;            13)  Changed program my_power_of_2.pro to power_of_2.pro
;                                                                  [08/10/2009   v3.2.0]
;            14)  Fixed units of FFT power spectrum and updated man page
;                                                                  [06/15/2011   v3.3.0]
;            15)  Fixed typo:  had not previously included windowed response in FFT
;                   and corrected issue when zero-padded result had N -> too large
;                                                                  [09/26/2011   v3.4.0]
;            16)  Fixed order of applying window and zero-padding  
;                                                                  [04/12/2012   v3.5.0]
;            17)  Fixed indexing typo                              
;                                                                  [05/22/2012   v3.5.1]
;            18)  Fixed power spectrum normalization for windowing function and
;                   cleaned up Man. page and routine and
;                   added references to Man. page and
;                   added some extra error handling
;                                                                  [05/07/2014   v3.5.2]
;            19)  Fixed windowing normalization:  my_windowf.pro already normalizes
;                   the window prior to returning and
;                   added keyword:  IWINDW
;                                                                  [05/27/2014   v3.5.3]
;            20)  Fixed a typo in a variable definition
;                                                                  [05/28/2014   v3.5.4]
;            21)  Fixed the normalization factor for the zeroth frequency bin
;                                                                  [02/05/2017   v3.5.5]
;
;   NOTES:      
;               1)  The power spectrum units are now correctly in [units^2/Hz]
;               2)  Normalization factors for the power spectral density in IDL are:
;                     2N/fs          :  for no windowing function or zero padding
;                     2N/(fs Wss)    :  for windowing function but no zero padding
;                     2K/(N fs)      :  for zero padding but no windowing function
;                     2K/(N fs Wss)  :  for both included
;
;                       fs   = sample rate [samples per second]
;                       Wss  = Mean square value of windowing function
;                            = 1/N âˆ‘_j w[j]^2
;                       K    = (N + M)^2
;                       M    = # of zeros added to end of DAT
;
;  REFERENCES:  
;               1)  Harris, F.J. "On the Use of Windows for Harmonic Analysis with the
;                      Discrete Fourier Transform," Proc. IEEE Vol. 66, No. 1,
;                      pp. 51-83, (1978).
;               2)  Paschmann, G. and P.W. Daly "Analysis Methods for Multi-Spacecraft
;                      Data," ISSI Scientific Report, Noordwijk, The Netherlands.,
;                      Int. Space Sci. Inst, (1998).
;               3)  Torrence, C. and G.P. Compo "A Practical Guide to Wavelet Analysis,"
;                      Bull. Amer. Meteor. Soc. 79, pp. 61-78, (1998).
;               4)  Donnelly, D. and B. Rust "The Fast Fourier Transform for
;                      Experimentalists, Part I:  Concepts," Comput. Sci. & Eng. 7(2),
;                      pp. 80-88, (2005).
;               5)  Donnelly, D. and B. Rust "The Fast Fourier Transform for
;                      Experimentalists, Part II:  Convolutions," Comput. Sci.
;                      & Eng. 7(4), pp. 92-95, (2005).
;               6)  Rust, B. and D. Donnelly "The Fast Fourier Transform for
;                      Experimentalists, Part III:  Classical Spectral Analysis,"
;                      Comput. Sci. & Eng. 7(5), pp. 74-78, (2005).
;               7)  Rust, B. and D. Donnelly "The Fast Fourier Transform for
;                      Experimentalists, Part IV:  Autoregressive Spectral Analysis,"
;                      Comput. Sci. & Eng. 7(6), pp. 85-90, (2005).
;               8)  Donnelly, D. "The Fast Fourier Transform for Experimentalists,
;                      Part V:  Filters," Comput. Sci. & Eng. 8(1), pp. 92-95, (2006).
;
;   CREATED:  08/26/2008
;   CREATED BY:  Lynn B. Wilson III
;    LAST MODIFIED:  02/05/2017   v3.5.5
;    MODIFIED BY: Lynn B. Wilson III
;
;*****************************************************************************************
;-

FUNCTION fft_power_calc,t0,dat,READ_WIN=read_win,RANGE=range,FORCE_N=force_n,$
                               SAMP_RA=sra,IWINDW=iwindw

;;----------------------------------------------------------------------------------------
;;  Define dummy variables
;;----------------------------------------------------------------------------------------
good_wnum      = [0,1,2,3,4,5]             ;;  dummy array of #'s to identify windowing function
n0             = 10L
k0             = n0[0]/2L - 1L
px             = DBLARR(n0[0])             ;;  dummy power array
pr             = [0d0,0d0]                 ;;  dummy power range
fr             = DINDGEN(n0[0])            ;;  dummy freq. bin array
tpx            = DBLARR(k0[0])             ;;  dummy power spectral density array
tags           = ['POWER_X','POWER_RA','FREQ','POWER_A']
dum            = CREATE_STRUCT(tags,px,pr,fr,tpx)
;;  Dummy error messages
bad_nin_mssg   = 'Incorrect # of inputs'
bad_fdin_mssg  = 'Incorrect input format:  TT and DAT must be [N]-element arrays...'
;;----------------------------------------------------------------------------------------
;;  Check input
;;----------------------------------------------------------------------------------------
test           = (N_PARAMS() LT 2)
IF (test[0]) THEN BEGIN
  ;;  no input???
  MESSAGE,bad_nin_mssg[0],/INFORMATIONAL,/CONTINUE
  RETURN,dum
ENDIF
;;----------------------------------------------------------------------------------------
;;  Define new parameters
;;----------------------------------------------------------------------------------------
dd             = REFORM(dat)
tt             = REFORM(t0)
nt             = SIZE(tt,/DIMENSIONS)
nd             = SIZE(dd,/DIMENSIONS)
;;----------------------------------------------------------------------------------------
;;  Check input format
;;----------------------------------------------------------------------------------------
test           = (nt[0] NE nd[0]) OR (N_ELEMENTS(nt) NE 1) OR (N_ELEMENTS(nd) NE 1)
IF (test[0]) THEN BEGIN
  ;;  bad input format???
  MESSAGE,bad_fdin_mssg[0],/INFORMATIONAL,/CONTINUE
  RETURN,dum
ENDIF
;;----------------------------------------------------------------------------------------
;;  Define variables
;;----------------------------------------------------------------------------------------
;nt             = N_ELEMENTS(tt)
;d              = REFORM(dat)               ;;  Prevent any [1,n] or [n,1] array from going on
;px             = DBLARR(nt)                ;;  dummy power associated w/ X-comp. if dat is a vector
;py             = DBLARR(nt)                ;;  dummy power associated w/ Y-comp. if dat is a vector
;pz             = DBLARR(nt)                ;;  dummy power associated w/ Z-comp. if dat is a vector
;dum = CREATE_STRUCT('POWER_X',px,'POWER_Y',py,'POWER_Z',pz,'POWER_RA',pr,'FREQ',fr)
;;----------------------------------------------------------------------------------------
;;  Define data range
;;----------------------------------------------------------------------------------------
IF KEYWORD_SET(range) THEN BEGIN
  myn  = range[1] - range[0]  ;;  number of elements used for min. var. calc.
  test = (myn[0] LE nt[0]) AND (range[0] GE 0) AND (range[1] LE nt[0])
  IF (test[0]) THEN BEGIN
    s = range[0]
    e = range[1]
  ENDIF ELSE BEGIN
    PRINT,'Too many elements demanded in keyword: RANGE'
    s   = 0
    e   = nt[0] - 1L
    myn = nt[0]
  ENDELSE
ENDIF ELSE BEGIN
  s   = 0
  e   = nt[0] - 1L
  myn = nt[0]
ENDELSE
;;----------------------------------------------------------------------------------------
;;  Set up vars for power spectrum
;;----------------------------------------------------------------------------------------
evlength       = tt[e] - tt[s]                  ;;  length of data record [s]
nfbins         = 1L + e - s                     ;;  Initial # of frequency bins
test           = KEYWORD_SET(sra) AND (N_ELEMENTS(sra) EQ 1)
IF (test) THEN BEGIN
  nsps = (DOUBLE(sra))[0]                       ;;  Avg. sample rate (# points/time)
ENDIF ELSE BEGIN
  nsps = (nfbins[0] - 1L)/evlength[0]           ;;  Avg. sample rate (# points/time)
ENDELSE
;;  LBW III  [05/27/2014   v3.5.3]
test           = (N_ELEMENTS(iwindw) NE 1)
IF (test) THEN BEGIN
  ;;  No windowing function specified --> Use a Hanning Window
  win_num = 2
ENDIF ELSE BEGIN
  test = TOTAL(iwindw[0] EQ good_wnum) LT 1
  IF (test) THEN win_num = 2 ELSE win_num = iwindw[0]
ENDELSE
;;----------------------------------------------------------------------------------------
;;  Pad array with zeros to force number of elements to a power of 2
;;  [Note:  This also increases the frequency resolution of your power spectrum]
;;----------------------------------------------------------------------------------------
;;  LBW III  [04/12/2012   v3.5.0]
;;      the zero-padding should actually be done AFTER the window is applied [see ref.]
fft_win        = FLTARR(nfbins)                 ;;  Var. used for FFT windowing routine
test           = KEYWORD_SET(read_win) AND (N_ELEMENTS(read_win) EQ 1)
IF (test) THEN BEGIN
;  ;;  Use a Hanning Window
;  my_windowf,nfbins - 1L,2,fft_win
;;  LBW III  [05/27/2014   v3.5.3]
  my_windowf,nfbins - 1L,win_num[0],fft_win
ENDIF ELSE BEGIN
  fft_win = REPLICATE(1.,nfbins)
ENDELSE
;;  Define the mean-square value of the windowing function for normalization purposes
;;  LBW III  [05/27/2014   v3.5.3]
;win_avg2       = MEAN(fft_win^2,/NAN)
;;  Apply windowing function to signal
wsign          = dd[s:e]*fft_win
;;  LBW III  [05/27/2014   v3.5.3]
;wsign          = dd[s:e]*fft_win/win_avg2[0]
;;  LBW III  [05/07/2014   v3.5.2]
;wsign     = d[s:e]*fft_win

IF KEYWORD_SET(force_n) THEN BEGIN
  focn = force_n
ENDIF ELSE BEGIN
  focn = nt
ENDELSE
;;  --> pad with zeroes
signal         = power_of_2(wsign,FORCE_N=focn)
;;  Redefine # of frequency bins, but NOT sample rate
nfbins2        = N_ELEMENTS(signal)
;;  Define normalization parameter due to zero-padding
zfact          = 2d0*(1d0*nfbins2[0])^2/(1d0*nfbins[0]*nsps[0])
;;----------------------------------------------------------------------------------------
;;  Calculate Power Spectral Density (PSD)
;;----------------------------------------------------------------------------------------
;wsign     = signal*fft_win
freqbins       = DINDGEN(nfbins2/2L)*(nsps/(nfbins2 - 1L))    ;;  use Hz scale on FFT power spec.
nevlength      = evlength + (nfbins2*1d0 - nfbins*1d0)/nsps   ;;  New effective event length

;;  LBW III  [04/12/2012   v3.5.0]
t_fftx         = ABS(FFT(signal))^2
;t_fftx    = ABS(FFT(wsign))^2     ;;  LBW III 09/26/2011   v3.4.0
;t_powx    = (2d0*(1d0*nfbins2)^2)/(1d0*nfbins*nsps[0])*t_fftx ;;  [units^2/Hz]
;;  LBW III  [05/07/2014   v3.5.2]
t_powx         = zfact[0]*t_fftx                              ;;  [units^2/Hz]
;;  [only keep positive frequencies]
tpx            = t_powx[0L:(nfbins2/2L - 1L)]                 ;;  PSD [units^2/Hz]
;;  Remove factor of 2 from zeroth frequency bin (i.e., it's not repeated)
;;  LBW III  [02/05/2017   v3.5.5]
tpx[0]        /= 2e0
;;----------------------------------------------------------------------------------------
;;  Convert power to dB above background
;;----------------------------------------------------------------------------------------
px             = 1d1*ALOG10(tpx)
rx             = 1.1*MAX(ABS(px),/NAN)
rn             = MIN(ABS(px),/NAN)/1.1
ry             = rx + 1d-1*ABS(rx)       ;;  MAX power = max power + 10% of max power
rz             = rn - 1d-1*ABS(rn)       ;;  MIN power = min power - 10% of min power
pr             = [rz,ry]                 ;;  Power range [MIN,MAX]
;;----------------------------------------------------------------------------------------
;;  Create return structure
;;----------------------------------------------------------------------------------------
tags           = ['POWER_X','POWER_RA','FREQ','POWER_A']
p_str          = CREATE_STRUCT(tags,px,pr,freqbins,tpx)
;p_str = CREATE_STRUCT('POWER_X',px,'POWER_RA',pr,'FREQ',freqbins,'POWER_A',tpx)
;;----------------------------------------------------------------------------------------
;;  Return to user
;;----------------------------------------------------------------------------------------

RETURN,p_str
END
